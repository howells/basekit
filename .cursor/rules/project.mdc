# Patternmode Project

## Overview

Patternmode is a modern React component library that combines the best design patterns and developer experience from leading UI libraries while building on a solid, accessible foundation. We curate and adapt components from shadcn/ui, Radix UI, Tailwind UI (Catalyst), and other excellent libraries, porting them to Base UI primitives with Tremor-inspired styling.

## Core Principles

1. **Accessibility First**: Built on Base UI primitives that provide robust accessibility out of the box
2. **Developer Experience**: Copy-paste friendly components with excellent TypeScript support
3. **Design Consistency**: Cohesive visual language inspired by Tremor's professional aesthetic
4. **Performance**: Modern React patterns with minimal runtime overhead
5. **Customization**: Flexible styling with Tailwind CSS and tailwind-variants

## Technical Architecture

### Foundation Stack

- **Base UI**: Provides accessible, unstyled primitives as the foundation
- **Tailwind CSS**: Utility-first styling framework
- **tailwind-variants**: Type-safe variant API for component styling
- **TypeScript**: Full type safety throughout the component library
- **Next.js**: Modern React framework for development and documentation

### Component Structure

```
src/components/
├── ui/           # Core UI primitives (buttons, inputs, etc.)
│   └── badge/    # Each component follows three-file architecture
│       ├── badge.tsx     # Pure component implementation
│       ├── config.tsx    # Component configuration (props, examples, docs)
│       └── example.tsx   # Preview component for prop explorer
├── charts/       # Data visualization components
├── forms/        # Form-related components
├── inputs/       # Input components and controls
└── navigation/   # Navigation and layout components
```

#### Three-File Component Architecture

Every component in Patternmode follows a consistent three-file structure for optimal separation of concerns:

**1. `component.tsx` - Pure Component Implementation**

- Contains only the core component logic and styling
- No configuration, examples, or preview code
- Exports the component and its TypeScript types
- Focuses solely on the component's functionality

**2. `config.tsx` - Pure Configuration Data**

- Contains the `ComponentConfig` object with metadata, prop definitions, and examples
- No React imports or JSX - pure TypeScript configuration
- Defines props available for user experimentation in the prop explorer
- Includes code examples and documentation
- Powers the component registry and documentation system

**3. `example.tsx` - Preview Component**

- Contains the example component used in the prop explorer and previews
- Handles prop transformations (e.g., string icon names to icon components)
- Provides the interactive preview experience
- Bridges between the prop explorer system and the pure component

### Styling Strategy

We use a hybrid approach combining the best of different styling methodologies:

1. **Tremor-Inspired Base Styles**: Professional, clean aesthetic with consistent spacing and typography
2. **tailwind-variants**: For type-safe component variants and responsive design
3. **CSS Custom Properties**: For dynamic theming and component-specific styling
4. **Utility Classes**: Tailwind utilities for rapid customization

## Component Development Process

### 1. Research & Selection

We analyze components from multiple sources:

- shadcn/ui component patterns and APIs
- Tailwind UI design implementations
- Radix UI accessibility patterns
- Tremor styling approaches

### 2. Base UI Integration

Each component is built on appropriate Base UI primitives:

- Ensures accessibility compliance
- Provides consistent behavior patterns
- Enables advanced features like portal rendering and collision detection

### 3. Three-File Implementation

Each component is implemented using our standardized three-file architecture:

**Step 1: Create Pure Component (`component.tsx`)**

```tsx
// badge/badge.tsx - Pure component implementation
import React from "react";
import { tv, type VariantProps } from "tailwind-variants";

const badgeVariants = tv({
  base: "inline-flex items-center gap-x-1.5 whitespace-nowrap rounded-md font-medium ring-1 ring-inset",
  variants: {
    variant: {
      default: "bg-blue-50 text-blue-900 ring-blue-500/30",
      // ... other variants
    },
    size: {
      sm: "px-1.5 py-0.5 text-xs",
      base: "px-2 py-1 text-xs",
      lg: "px-2.5 py-1.5 text-sm",
    },
  },
  defaultVariants: {
    variant: "default",
    size: "base",
  },
});

interface BadgeProps
  extends React.HTMLAttributes<HTMLSpanElement>,
    VariantProps<typeof badgeVariants> {
  leftIcon?: React.ComponentType<{ className?: string }>;
  rightIcon?: React.ComponentType<{ className?: string }>;
}

const Badge = React.forwardRef<HTMLSpanElement, BadgeProps>(
  (
    {
      /* ... */
    }
  ) => {
    // Component implementation
  }
);

export { Badge, badgeVariants, type BadgeProps };
```

**Step 2: Create Configuration (`config.tsx`)**

```tsx
// badge/config.tsx - Pure configuration data
import type { ComponentConfig } from "@/lib/component-config-types";

export const componentConfig: ComponentConfig = {
  id: "badge",
  name: "Badge",
  description: "A label used to show a status or category.",
  category: "ui" as const,
  badge: "UI",
  installation: { npm: "@base-ui-components/react" },
  importStatement: `import { Badge } from "@/components/ui/badge";`,
  componentId: "BadgeExample",
  props: [
    {
      name: "variant",
      type: "select",
      options: ["default", "neutral", "success", "error", "warning"],
      defaultValue: "default",
      description: "The visual style variant of the badge.",
    },
    {
      name: "leftIcon",
      type: "icon",
      description: "Icon component to display on the left side.",
    },
    // ... other props
  ],
  examples: [
    {
      title: "Default",
      code: `<Badge>Badge</Badge>`,
    },
    // ... other examples
  ],
};
```

**Step 3: Create Example Component (`example.tsx`)**

```tsx
// badge/example.tsx - Preview component
import React from "react";
import { Badge } from "./badge";

export const BadgeExample = ({
  variant = "default",
  size = "base",
  leftIcon,
  rightIcon,
  children = "Badge",
  ...props
}: {
  variant?: "default" | "neutral" | "success" | "error" | "warning";
  size?: "sm" | "base" | "lg";
  leftIcon?: React.ComponentType<{ className?: string }>;
  rightIcon?: React.ComponentType<{ className?: string }>;
  children?: string;
  [key: string]: unknown;
}) => {
  return (
    <Badge
      variant={variant}
      size={size}
      leftIcon={leftIcon}
      rightIcon={rightIcon}
      {...props}
    >
      {children}
    </Badge>
  );
};
```

### 4. Styling Adaptation

Components receive Tremor-inspired styling with:

- Consistent color palettes (grays, blues, semantic colors)
- Professional spacing and typography scales
- Dark mode support throughout
- Focus management and keyboard navigation styles

### 5. API Design

Component APIs prioritize:

- TypeScript-first development
- Intuitive prop naming
- Composition over configuration
- Separation of concerns through three-file architecture

## Quality Standards

- **TypeScript**: Full type safety with proper generic support
- **Accessibility**: WCAG AA compliance via Base UI primitives
- **Performance**: Minimal re-renders and optimal bundle size
- **Architecture**: Consistent three-file structure for all components
- **Configuration**: Pure TypeScript configuration without React dependencies
- **Documentation**: Clear examples and API documentation powered by config files
- **Testing**: Comprehensive test coverage for critical paths

## Contributing

We welcome contributions that align with our philosophy of curating the best patterns from the ecosystem. When proposing new components:

1. **Identify the best-in-class reference implementation** from shadcn/ui, Catalyst, etc.
2. **Ensure Base UI primitive support exists** for the component's functionality
3. **Follow the three-file architecture**:
   - `component.tsx`: Pure component implementation
   - `config.tsx`: Pure TypeScript configuration
   - `example.tsx`: Preview component for prop explorer
4. **Follow our styling and API conventions** with Tremor-inspired design
5. **Provide comprehensive TypeScript types** with proper generics
6. **Include accessibility considerations** via Base UI primitives
7. **Add to component registry** in `src/lib/component-registry.ts`

### Component Conversion Process

When converting existing components to the new architecture:

1. **Extract pure component** logic to `component.tsx`
2. **Create configuration** in `config.tsx` using `ComponentConfig` interface
3. **Build example component** in `example.tsx` for prop explorer integration
4. **Update component registry** to include the new configuration
5. **Test prop explorer** functionality and icon handling
6. **Verify TypeScript** compliance and remove any runtime validation

## License

This project builds upon the excellent work of the open-source community. We maintain compatibility with MIT licensing and provide proper attribution to source libraries.

---

_Patternmode: The best of the React ecosystem, unified under Base UI primitives with professional Tremor styling._
description:
globs:
alwaysApply: false

---
